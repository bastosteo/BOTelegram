from telethon import TelegramClient, events
import requests
import re
import asyncio
import config  # On importe les param√®tres utilisateur
import json

# Fonction pour r√©cup√©rer les cl√©s valides depuis GitHub
def load_licenses():
    url = "https://raw.githubusercontent.com/bastosteo/BOTelegram/main/licenses.json"  # URL brute du fichier JSON
    response = requests.get(url)  # Effectue la requ√™te GET pour r√©cup√©rer le fichier
    if response.status_code == 200:
        data = response.json()  # Parse le JSON si la requ√™te est r√©ussie
        return data["licenses"]
    else:
        print(f"Erreur lors du t√©l√©chargement du fichier : {response.status_code}")
        return []

# Fonction pour v√©rifier et mettre √† jour l'√©tat d'une cl√©
def update_license_status(key, reserved):
    licenses = load_licenses()  # Charge les cl√©s depuis GitHub
    for license in licenses:
        if license["key"] == key:
            license["is_reserved"] = reserved
            break
    # Sauvegarde les nouvelles donn√©es dans le fichier
    with open("licenses.json", "w") as file:
        json.dump({"licenses": licenses}, file, indent=4)

# V√©rifier si la cl√© de licence est valide et non r√©serv√©e
def is_license_valid_and_available(license_key):
    licenses = load_licenses()  # Charge les cl√©s depuis GitHub
    for license in licenses:
        if license["key"] == license_key:
            if license["is_reserved"]:
                send_alert(f"Alerte : La cl√© {license_key} est d√©j√† utilis√©e par une autre personne.")
                return False  # La cl√© est d√©j√† r√©serv√©e, envoie une alerte
            else:
                return True  # La cl√© est valide et disponible
    return False  # La cl√© n'existe pas

# V√©rifier si la cl√© de licence est valide et r√©server la cl√©
def reserve_license(license_key):
    if is_license_valid_and_available(license_key):
        # R√©serve la cl√© (la rend indisponible)
        update_license_status(license_key, reserved=True)
        return True
    else:
        return False

# V√©rification de la cl√© de licence
if reserve_license(config.license_key):  # V√©rifie et r√©serve la cl√© d√©finie dans config.py
    print("Licence valide et r√©serv√©e. D√©marrage du bot...")
    # D√©marre le bot ici (ajoute ton code de d√©marrage de bot)
else:
    print("Cl√© de licence invalide ou d√©j√† r√©serv√©e. Arr√™t du bot.")
    exit()  # Arr√™ter le bot si la cl√© n'est pas valide ou d√©j√† r√©serv√©e



client = TelegramClient('session_name', config.API_ID, config.API_HASH)

# Regex pour d√©tecter une adresse crypto
crypto_address_pattern = r'\b0x[a-fA-F0-9]{40}\b'

@client.on(events.NewMessage(chats=config.CHANNEL_ID))
async def handler(event):
    if event.sender_id == config.TARGET_USER_ID:  # Filtre les messages de la personne cibl√©e
        message = event.raw_text
        addresses = re.findall(crypto_address_pattern, message)

        if addresses:
            for address in addresses:
                print(f'‚ö° Adresse crypto d√©tect√©e : {address}')
                await execute_buy(address)

async def execute_buy(address):   
    await asyncio.sleep(2)

    message = config.MESSAGE_TEMPLATE.format(address=address)
    await client.send_message(config.GMGN_BSC_ID, message)
    print(f"üöÄ Commande envoy√©e √† GMGN BSC BOT : {message}")

async def main():
    await client.start(config.PHONE_NUMBER)
    print(f'ü§ñ Bot connect√© et √† l\'√©coute du canal {config.CHANNEL_ID}, surveille {config.TARGET_USER_ID}')
    await client.run_until_disconnected()

with client:
    client.loop.run_until_complete(main())
